#+TITLE: Compiler Design
#+SUBTITLE: Lab 1
#+AUTHOR: Seshal Jain
#+OPTIONS: num:2 toc:nil ^:nil
#+DATE: August 2, 2021
#+LATEX_CLASS: assignment
#+EXPORT_FILE_NAME: 191112436

* Implementations
Given language is ={a, b}=
** NFA
#+begin_src cpp
#include <bits/stdc++.h>
using namespace std;

struct state {
  int id;
  bool final;
  map<char, vector<int>> transitions;
} typedef state;

bool nfa(vector<state> &states, int current, string input, int index) {
  if (index == input.size())
    return states[current].final;

  for (auto it : states[current].transitions[input[index]]) {
    if (nfa(states, it, input, index + 1)) {
      return true;
    }
  }

  return false;
}

int main() {
  int n, initState, tCount, inputs;

  cin >> n >> initState;

  vector<state> states(n);
  for (int i = 0; i < n; i++) {
    states[i].id = i;
    cin >> states[i].final;
  }

  int state1, state2;
  char tType;
  cin >> tCount;
  for (int i = 0; i < tCount; i++) {
    cin >> state1 >> state2 >> tType;
    states[state1].transitions[tType].push_back(state2);
  }

  cin >> inputs;
  while (inputs--) {
    string input;
    cin >> input;
    if (nfa(states, initState, input, 0))
      cout << "Accepted: " << input << "\n";
    else
      cout << "Rejected: " << input << "\n";
  }
}
#+end_src

** DFA
#+begin_src cpp
#include <bits/stdc++.h>
using namespace std;

struct state {
  int id;
  bool final;
  map<char, int> transitions;
} typedef state;

bool nfa(vector<state> &states, int current, string input, int index) {
  if (index == input.size())
    return states[current].final;

  if (nfa(states, states[current].transitions[input[index]], input,
          index + 1)) {
    return true;
  }

  return false;
}

int main() {
  int n, initState, tCount, inputs;

  cin >> n >> initState;

  vector<state> states(n);
  for (int i = 0; i < n; i++) {
    states[i].id = i;
    cin >> states[i].final;
  }

  int state1, state2;
  char tType;
  cin >> tCount;
  for (int i = 0; i < tCount; i++) {
    cin >> state1 >> state2 >> tType;
    states[state1].transitions[tType] = state2;
  }

  cin >> inputs;
  while (inputs--) {
    string input;
    cin >> input;
    if (nfa(states, initState, input, 0))
      cout << "Accepted: " << input << "\n";
    else
      cout << "Rejected: " << input << "\n";
  }
}
#+end_src


\newpage
Implementing NFA and equivalent DFA for given regular expressions:
** (a + b) * abb
*** NFA
#+begin_src dot :file images/nfa1.png
 digraph finite_state_machine {
	rankdir=LR;
    {
	node [shape=doublecircle]; q3;
    node [color=transparent fontcolor=transparent shape=circle]; i;
    }
    i -> q0
    q0 -> q0 [label = "a, b"]
    q0 -> q1 [label = "a"]
    q1 -> q2 [label = "b"]
    q2 -> q3 [label = "b"]
}
#+end_src

#+RESULTS:
[[file:images/nfa1.png]]

**** Input
#+begin_example
3 0
0 0 1
6
0 0 a
0 0 b
0 1 b
1 2 b
2 2 a
2 2 b
7
abb
b
abbab
aaabbbbababb
baababbb
ababababa
bbababb
#+end_example
**** Output
#+begin_example
Accepted: abb
Rejected: b
Accepted: abbab
Accepted: aaabbbbababb
Accepted: baababbb
Rejected: ababababa
Accepted: bbababb
#+end_example

*** DFA
Transition table from NFA:

|----------+--------+--------|
| State    | a      | b      |
|----------+--------+--------|
| -> q0    | q0, q1 | q0     |
| q1       | \phi   | \phi   |
| q2       | \phi   | \phi   |
| * q3     | \phi   | \phi   |
| q0, q1   | q0, q1 | q0, q2 |
| q0, q2   | q0, q1 | q0, q3 |
| * q0, q3 | q0, q1 | q0     |
|----------+--------+--------|

#+begin_src dot :file images/dfa1.png
 digraph finitestatemachine {
	rankdir=LR;
    {
	node [shape=doublecircle]; "q0,q3";
    node [color=transparent fontcolor=transparent shape=circle]; i;
    }
    i -> q0
    q0 -> "q0,q1" [label = "a"]
    q0 -> q0 [label = "b"]
    "q0,q1" -> "q0,q1" [label = "a"]
    "q0,q1" -> "q0,q2" [label = "b"]
    "q0,q2" -> "q0,q1" [label = "a"]
    "q0,q2" -> "q0,q3" [label = "b"]
    "q0,q3" -> "q0,q1" [label = "a"]
    "q0,q3" -> q0 [label = "b"]
}
#+end_src

#+RESULTS:
[[file:images/dfa1.png]]

**** Input
#+begin_example
4 0
0 0 0 1
8
0 0 b
0 1 a
1 1 a
1 2 b
2 1 a
2 3 b
3 1 a
3 0 b
7
abb
b
abbab
aaabbbbababb
baababbb
ababababa
bbababb
#+end_example

**** Output
#+begin_example
Accepted: abb
Rejected: b
Rejected: abbab
Accepted: aaabbbbababb
Rejected: baababbb
Rejected: ababababa
Accepted: bbababb
#+end_example

** (a + b) * bb(a + b) *
*** NFA
#+begin_src dot :file images/nfa2.png
 digraph finite_state_machine {
	rankdir=LR;
    {
	node [shape=doublecircle]; q2;
    node [color=transparent fontcolor=transparent shape=circle]; i;
    }
    i -> q0
    q0 -> q0 [label = "a"]
    q0 -> q0 [label = "b"]
    q0 -> q1 [label = "b"]
    q1 -> q2 [label = "b"]
    q2 -> q2 [label = "a"]
    q2 -> q2 [label = "b"]
}
#+end_src

#+RESULTS:
[[file:images/nfa2.png]]
**** Input
#+begin_example
Accepted: abb
Rejected: b
Rejected: abbab
Accepted: aaabbbbababb
Rejected: baababbb
Rejected: ababababa
Accepted: bbababb
#+end_example
*** DFA
Transition table from NFA:

|--------------+--------+------------|
| State        | a      | b          |
|--------------+--------+------------|
| -> q0        | q0     | q0, q1     |
| q1           | \phi   | q2         |
| * q2         | q2     | q2         |
| q0, q1       | q0     | q0, q1, q2 |
| * q0, q1, q2 | q0, q2 | q0, q1, q2 |
| * q0, q2     | q0, q2 | q0, q1, q2 |
|--------------+--------+------------|

#+begin_src dot :file images/dfa2.png
 digraph finitestatemachine {
	rankdir=LR;
    {
	node [shape=doublecircle]; "q0,q2";
    node [color=transparent fontcolor=transparent shape=circle]; i;
    }
    i -> q0
    q0 -> q0 [label = "a"]
    q0 -> "q0,q1" [label = "b"]
    "q0,q1" -> q0 [label = "a"]
    "q0,q1" -> "q0,q2" [label = "b"]
    "q0,q2" -> "q0,q2" [label = "a"]
    "q0,q2" -> "q0,q2" [label = "b"]
}
#+end_src

#+RESULTS:
[[file:images/dfa2.png]]

**** Input
#+begin_example
3 0
0 0 1
6
0 0 a
0 1 b
1 0 a
1 2 b
2 2 a
2 2 b
7
abb
b
abbab
aaabbbbababb
baababbb
ababababa
bbababb
#+end_example

**** Output
#+begin_example
Accepted: abb
Rejected: b
Accepted: abbab
Accepted: aaabbbbababb
Accepted: baababbb
Rejected: ababababa
Accepted: bbababb
#+end_example

** (a + b) * a(a + b)
*** NFA
#+begin_src dot :file images/nfa3.png
 digraph finite_state_machine {
	rankdir=LR;
    {
	node [shape=doublecircle]; q2;
    node [color=transparent fontcolor=transparent shape=circle]; i;
    }
    i -> q0
    q0 -> q0 [label = "a"]
    q0 -> q0 [label = "b"]
    q0 -> q1 [label = "a"]
    q1 -> q2 [label = "a"]
    q1 -> q2 [label = "b"]
}
#+end_src

#+RESULTS:
[[file:images/nfa3.png]]

**** Input
#+begin_example
3 0
0 0 1
5
0 0 a
0 0 b
0 1 a
1 2 a
1 2 b
7
abb
b
abbab
aaabbbbababb
baababbb
ababababa
bbababb
#+end_example
**** Output
#+begin_example
Rejected: abb
Rejected: b
Accepted: abbab
Rejected: aaabbbbababb
Rejected: baababbb
Rejected: ababababa
Rejected: bbababb
#+end_example

*** DFA
Transition table from NFA:

|--------------+------------+--------|
| State        | a          | b      |
|--------------+------------+--------|
| -> q0        | q0, q1     | q0     |
| q1           | q2         | q2     |
| * q2         | \phi       | \phi   |
| q0, q1       | q0, q1, q2 | q0, q2 |
| * q0, q1, q2 | q0, q1, q2 | q0, q2 |
| * q0, q2     | q0, q1     | q0     |
|--------------+------------+--------|

#+begin_src dot :file images/dfa3.png
 digraph finitestatemachine {
	rankdir=LR;
    {
	node [shape=doublecircle]; "q0,q2"; "q0,q1,q2";
    node [color=transparent fontcolor=transparent shape=circle]; i;
    }
    i -> q0
    q0 -> "q0,q1" [label = "a"]
    q0 -> q0 [label = "b"]
    "q0,q1" -> "q0,q1,q2" [label = "a"]
    "q0,q1" -> "q0,q2" [label = "b"]
    "q0,q2" -> "q0,q1" [label = "a"]
    "q0,q2" -> q0 [label = "b"]
    "q0,q1,q2" -> "q0,q1,q2" [label = "a"]
    "q0,q1,q2" -> "q0,q2" [label = "b"]
}
#+end_src

#+RESULTS:
[[file:images/dfa3.png]]

**** Input
#+begin_example
4 0
0 0 1 1
8
0 1 a
0 0 b
1 2 a
1 3 b
2 2 a
2 3 b
3 1 a
3 0 b
7
abb
b
abbab
aaabbbbababb
baababbb
ababababa
bbababb
#+end_example

**** Output
#+begin_example
Rejected: abb
Rejected: b
Accepted: abbab
Rejected: aaabbbbababb
Rejected: baababbb
Rejected: ababababa
Rejected: bbababb
#+end_example
